#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏–∫–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö CV
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlmodel import select

from src.config import settings
from src.storages.sql.models import CV, User
from src.modules.cv import repository as cv_repo


async def demo_cv_logic(session: AsyncSession):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ CV"""
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    stmt = select(User).where(User.is_active == True).limit(1)
    result = await session.execute(stmt)
    user = result.scalar_one_or_none()
    
    if not user:
        print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î")
        return
    
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} (ID: {user.id})")
    print("-" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ CV
    active_count = await cv_repo.get_user_active_cv_count(session, user.id)
    all_cvs = await cv_repo.get_user_cvs(session, user.id, include_inactive=True)
    
    print(f"üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö CV: {active_count}")
    print(f"   –í—Å–µ–≥–æ CV: {len(all_cvs)}")
    
    if all_cvs:
        print(f"\nüìÑ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö CV:")
        for i, cv in enumerate(all_cvs, 1):
            status = "‚úÖ –ê–ö–¢–ò–í–ù–û" if cv.is_active else "‚ùå –ù–ï–ê–ö–¢–ò–í–ù–û"
            print(f"   {i}. {cv.original_filename} - {status}")
    
    print(f"\nüîç –ü–æ–∏—Å–∫ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ generation:")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ generation –º–æ–¥—É–ª—å
    from src.modules.generation import repository as gen_repo
    from src.modules.generation.schemas import GenerationFilters
    
    # –ü–æ–∏—Å–∫ –ø–æ –æ–±—â–∏–º —Ç–µ–≥–∞–º
    empty_filters = GenerationFilters(
        department=None,
        experience_years_min=None,
        experience_years_max=None,
        skills=None,
        level=None,
        languages=None,
        education_level=None,
        age_min=None,
        age_max=None
    )
    
    employees = await gen_repo.search_employees_by_tags(
        session=session,
        tags=["python", "general", "professional"],
        filters=empty_filters,
        limit=10
    )
    
    user_found = None
    for emp in employees:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω –ª–∏ –Ω–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cv_stmt = select(CV).where(CV.id == emp.id)
        cv_result = await session.execute(cv_stmt)
        cv = cv_result.scalar_one_or_none()
        
        if cv and cv.user_id == user.id:
            user_found = emp
            break
    
    if user_found:
        print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞")
        print(f"   üìã CV ID: {user_found.id}")
        print(f"   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {user_found.rating}")
        print(f"   üéØ Match Score: {user_found.match_score}")
    else:
        print(f"   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞")
    
    print(f"\n‚ú® –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:")
    print(f"   ‚Ä¢ –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ CV —Å—Ç–∞—Ä—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è")
    print(f"   ‚Ä¢ –í –ø–æ–∏—Å–∫–µ —É—á–∞—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ CV –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print(f"   ‚Ä¢ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ CV —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üîß –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è CV")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    engine = create_async_engine(
        str(settings.db_url.get_secret_value()),
        echo=False,
        future=True,
    )
    
    try:
        async with AsyncSession(engine) as session:
            await demo_cv_logic(session)
        
        print(f"\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1
    
    finally:
        await engine.dispose()
    
    return 0


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
