#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ CV
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlmodel import select
from sqlalchemy import desc

from src.config import settings
from src.storages.sql.models import User, CV, UserRole


async def check_users_and_cvs():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö CV"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ CV...")
    
    engine = create_async_engine(
        settings.db_url.get_secret_value(),
        echo=False
    )
    
    try:
        async with AsyncSession(engine) as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_stmt = select(User).order_by(User.created_at.desc()) # type: ignore
            users_result = await session.execute(users_stmt)
            users = users_result.scalars().all()
            
            print(f"\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {len(users)}")
            print("-" * 60)
            
            for i, user in enumerate(users, 1):
                role_emoji = "üë§" if user.role == UserRole.USER else "üëî" if user.role == UserRole.HR else "üëë"
                print(f"{i:2}. {role_emoji} {user.full_name}")
                print(f"    üìß {user.email}")
                print(f"    üéØ –†–æ–ª—å: {user.role.value}")
                print(f"    ‚≠ê XP: {user.xp}")
                print(f"    üìÖ –°–æ–∑–¥–∞–Ω: {user.created_at.strftime('%Y-%m-%d %H:%M:%S')}")
                
                # –ü–æ–ª—É—á–∞–µ–º CV –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cv_stmt = select(CV).where(CV.user_id == user.id, CV.is_active == True)
                cv_result = await session.execute(cv_stmt)
                cvs = cv_result.scalars().all()
                
                if cvs:
                    for cv in cvs:
                        print(f"    üìÑ CV: {cv.original_filename}")
                        print(f"       üìÇ –§–∞–π–ª: {cv.filename}")
                        print(f"       üìä –°—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞: {cv.analysis_status}")
                        if cv.experience_years:
                            print(f"       üíº –û–ø—ã—Ç: {cv.experience_years} –ª–µ—Ç")
                        if cv.rating:
                            print(f"       ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {cv.rating}/10")
                        if cv.department:
                            print(f"       üè¢ –û—Ç–¥–µ–ª: {cv.department}")
                        if cv.grade:
                            print(f"       üìà –ì—Ä–µ–π–¥: {cv.grade}")
                        if cv.specialization:
                            print(f"       üéØ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {cv.specialization}")
                else:
                    print(f"    üìÑ CV: –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
                
                print()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ CV
            all_cvs_stmt = select(CV).where(CV.is_active == True)
            all_cvs_result = await session.execute(all_cvs_stmt)
            all_cvs = all_cvs_result.scalars().all()
            
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ CV:")
            print(f"   üìÑ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö CV: {len(all_cvs)}")
            
            if all_cvs:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º
                departments = {}
                grades = {}
                ratings = []
                
                for cv in all_cvs:
                    if cv.department:
                        departments[cv.department] = departments.get(cv.department, 0) + 1
                    if cv.grade:
                        grades[cv.grade] = grades.get(cv.grade, 0) + 1
                    if cv.rating:
                        ratings.append(cv.rating)
                
                if departments:
                    print(f"\nüìà –ü–æ –æ—Ç–¥–µ–ª–∞–º:")
                    for dept, count in departments.items():
                        print(f"   üè¢ {dept}: {count}")
                
                if grades:
                    print(f"\nüìä –ü–æ –≥—Ä–µ–π–¥–∞–º:")
                    for grade, count in grades.items():
                        print(f"   üìà {grade}: {count}")
                
                if ratings:
                    avg_rating = sum(ratings) / len(ratings)
                    print(f"\n‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.2f}/10")
                    print(f"   üìä –ú–∏–Ω: {min(ratings):.1f}, –ú–∞–∫—Å: {max(ratings):.1f}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise
    finally:
        await engine.dispose()


if __name__ == "__main__":
    asyncio.run(check_users_and_cvs())
