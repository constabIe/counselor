#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –±—ç–π–¥–∂–µ–π
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from src.config import settings
from src.modules.badges import repository as badge_repo
from src.storages.sql.models import BadgeCategory

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±—ç–π–¥–∂–∏
INITIAL_BADGES = [
    # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    {
        "code": "first_course",
        "name": "–£—á–µ–Ω–∏–∫",
        "category": BadgeCategory.EDUCATION,
        "xp_reward": 20
    },
    {
        "code": "fast_learner", 
        "name": "–ë—ã—Å—Ç—Ä—ã–π —É—á–µ–Ω–∏–∫",
        "category": BadgeCategory.EDUCATION, 
        "xp_reward": 50
    },
    
    # –ö–∞—Ä—å–µ—Ä–∞
    {
        "code": "first_cv",
        "name": "–ü–µ—Ä–≤—ã–π —à–∞–≥",
        "category": BadgeCategory.CAREER,
        "xp_reward": 15
    },
    {
        "code": "job_explorer",
        "name": "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å",
        "category": BadgeCategory.CAREER,
        "xp_reward": 25
    },
    
    # –ù–∞–≤—ã–∫–∏
    {
        "code": "skill_master",
        "name": "–ú–∞—Å—Ç–µ—Ä –Ω–∞–≤—ã–∫–æ–≤", 
        "category": BadgeCategory.SKILLS,
        "xp_reward": 30
    },
    
    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    {
        "code": "early_bird",
        "name": "–†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞",
        "category": BadgeCategory.ACTIVITY, 
        "xp_reward": 40
    },
    {
        "code": "profile_master",
        "name": "–ú–∞—Å—Ç–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è",
        "category": BadgeCategory.ACTIVITY,
        "xp_reward": 35
    }
]


async def init_badges():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±—ç–π–¥–∂–∏"""
    
    print("üèÜ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –±—ç–π–¥–∂–µ–π...")
    
    engine = create_async_engine(
        settings.db_url.get_secret_value(),
        echo=False
    )
    
    try:
        async with AsyncSession(engine) as session:
            created_count = 0
            
            for badge_data in INITIAL_BADGES:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –±—ç–π–¥–∂ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º
                existing_badge = await badge_repo.get_badge_by_code(session, badge_data["code"])
                
                if existing_badge:
                    print(f"   ‚ö†Ô∏è  –ë—ç–π–¥–∂ '{badge_data['code']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±—ç–π–¥–∂
                try:
                    badge = await badge_repo.create_badge(session, badge_data)
                    created_count += 1
                    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –±—ç–π–¥–∂: {badge.name} ({badge.code})")
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–π–¥–∂–∞ {badge_data['code']}: {e}")
                    continue
            
            await session.commit()
            print(f"\n‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–∑–¥–∞–Ω–æ –±—ç–π–¥–∂–µ–π: {created_count}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        raise
    finally:
        await engine.dispose()


if __name__ == "__main__":
    asyncio.run(init_badges())
