#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –±–µ–π–¥–∂–µ–π
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from src.config import settings
from src.modules.badges import service as badge_service

async def test_badge_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –±–µ–π–¥–∂–µ–π"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–µ–π–¥–∂–µ–π...")
    
    engine = create_async_engine(
        settings.db_url.get_secret_value(),
        echo=False
    )
    
    try:
        async with AsyncSession(engine) as session:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
            from uuid import uuid4
            test_user_id = uuid4()
            
            print(f"üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {test_user_id}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
            triggers = [
                "user_registered",
                "cv_uploaded", 
                "course_enrolled",
                "course_completed"
            ]
            
            for trigger in triggers:
                print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∏–≥–≥–µ—Ä: {trigger}")
                badges = await badge_service.badge_service.check_and_award_badges(
                    session, test_user_id, trigger
                )
                print(f"   –í—ã–¥–∞–Ω–æ –±–µ–π–¥–∂–µ–π: {len(badges)}")
                for badge in badges:
                    print(f"   üèÜ {badge}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print(f"\nüìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–π–¥–∂–µ–π...")
            stats = await badge_service.badge_service.get_user_badge_stats(session, test_user_id)
            print(f"   –í—Å–µ–≥–æ –±–µ–π–¥–∂–µ–π: {stats.earned_badges}/{stats.total_badges}")
            print(f"   XP –æ—Ç –±–µ–π–¥–∂–µ–π: {stats.total_xp_from_badges}")
            print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {stats.completion_percentage:.1f}%")
            
            await session.rollback()  # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        raise
    finally:
        await engine.dispose()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(test_badge_system())
